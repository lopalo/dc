#!/usr/bin/python

import sys
import random
import sqlite3
import json
from math import pi, cos, sin


ASTEROID_COUNT = 15
ASTEROID_SIZE = 70, 200
ASTEROID_DURABILITY = (1000, 30000)
ASTEROID_ROTATION_SPEED = -15, 15
ASTEROID_FIELD_RADIUS = 300, 1500
ASTEROID_FIELD_POSITION = 100, 230
ASTEROID_TRAJECTORY_PROBABILITY = 0.3

GATE_POSITION = 100, 230
GATE_ROTATION_SPEED = -20
GATE_SIZE = 300

CP_POSITION = -2000, -100
CP_SIZE = 400
CP_DURABILITY = 430



INSERT_GATE = """
    INSERT INTO gate (area, id, name, x, y, angle, actions, width, height)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
"""


INSERT_ASTEROID = """
    INSERT INTO asteroid (
        area, id, name, x, y, angle,
        max_durability, durability,
        actions, width, height
    )
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
"""


INSERT_CP = """
    INSERT INTO control_point (
        area, id, name, x, y, angle,
        max_durability, durability, actions,
        width, height, owner
    )
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
"""



def get_counter():
    c = [0]
    def counter():
        c[0] += 1
        return c[0]
    return counter


def insert_gate(cur, area_id, counter):
    pos = GATE_POSITION
    rotation = {'rotSpeed': GATE_ROTATION_SPEED,
                'tag': "EternalRotation"}
    params = (area_id,
              counter(),
              "Gate",
              pos[0],
              pos[1],
              random.randint(0, 360),
              json.dumps([rotation]),
              GATE_SIZE,
              GATE_SIZE)
    cur.execute(INSERT_GATE, params)


def insert_asteroids(cur, area_id, counter):
    c_pos = ASTEROID_FIELD_POSITION
    params_list = []
    for _ in xrange(ASTEROID_COUNT):
        len_ = random.uniform(*ASTEROID_FIELD_RADIUS)
        angle = random.uniform(-pi, pi)
        pos = c_pos[0] + len_ * cos(angle), c_pos[1] + len_ * sin(angle)
        size = random.randint(*ASTEROID_SIZE)
        durability = random.randint(*ASTEROID_DURABILITY)

        rotation = {'rotSpeed': random.randint(*ASTEROID_ROTATION_SPEED),
                    'tag': "EternalRotation"}
        trajectory = {'center': pos,
                      'radius': max(ASTEROID_FIELD_RADIUS),
                      'rotSpeed': random.randint(*ASTEROID_ROTATION_SPEED),
                      'curAngle': random.randint(0, 360),
                      'tag': "MoveCircularTrajectory"}
        actions = []
        actions.append(rotation)
        if random.random() < ASTEROID_TRAJECTORY_PROBABILITY:
            actions.append(trajectory)
        params_list.append((area_id,
                            counter(),
                            "Asteroid",
                            int(pos[0]),
                            int(pos[1]),
                            random.randint(0, 360),
                            durability,
                            durability,
                            json.dumps(actions),
                            size,
                            size))
    cur.executemany(INSERT_ASTEROID, params_list)


def insert_control_point(cur, area_id, counter):
    pos = CP_POSITION
    actions = []
    params = (area_id,
              counter(),
              "Control point",
              pos[0],
              pos[1],
              random.randint(0, 360),
              CP_DURABILITY,
              CP_DURABILITY,
              json.dumps(actions),
              CP_SIZE,
              CP_SIZE,
              None)
    cur.execute(INSERT_CP, params)


def main():
    db_name = sys.argv[1]
    area_id = sys.argv[2]
    conn = sqlite3.connect(db_name)
    cur = conn.cursor()
    counter = get_counter()
    insert_gate(cur, area_id, counter)
    insert_asteroids(cur, area_id, counter)
    insert_control_point(cur, area_id, counter)
    conn.commit()



if __name__ == "__main__":
    main()

